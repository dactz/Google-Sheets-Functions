// Function to fetch email from a GitHub profile URL using the GitHub API
function getGitHubEmail(gitHubUrl) {
  const baseApiUrl = "https://api.github.com";
  const token = "YOUR_GITHUB_PERSONAL_ACCESS_TOKEN"; // Optional: Add a personal access token here if rate-limiting becomes an issue

  try {
    // Extract the GitHub username from the provided URL
    const match = gitHubUrl.match(/^https:\/\/github\.com\/([^\/]+)/);
    if (!match) {
      return "Invalid GitHub URL";
    }
    const username = match[1];
    
    // Step 1: Fetch public repositories for the user
    const repoUrl = `${baseApiUrl}/users/${username}/repos`;
    const repoResponse = UrlFetchApp.fetch(repoUrl, {
      headers: {
        Authorization: `token ${token}`,
        Accept: "application/vnd.github.v3+json"
      },
      muteHttpExceptions: true
    });

    if (repoResponse.getResponseCode() !== 200) {
      return `Error fetching repositories: ${repoResponse.getContentText()}`;
    }

    const repos = JSON.parse(repoResponse.getContentText());

    // Step 2: Loop through each repository to find the latest commit
    for (const repo of repos) {
      const commitsUrl = `${repo.commits_url.replace('{/sha}', '')}?per_page=1`;
      const commitResponse = UrlFetchApp.fetch(commitsUrl, {
        headers: {
          Authorization: `token ${token}`,
          Accept: "application/vnd.github.v3+json"
        },
        muteHttpExceptions: true
      });

      if (commitResponse.getResponseCode() !== 200) {
        continue; // Skip this repository if there's an issue fetching the commits
      }

      const commits = JSON.parse(commitResponse.getContentText());
      if (commits.length > 0) {
        const commit = commits[0];
        const email = commit.commit.author.email;

        // Exclude GitHub's noreply emails
        if (!email.includes("noreply.github.com")) {
          return email;
        }
      }
    }

    return "No email found";

  } catch (error) {
    return `Error: ${error.message}`;
  }
}
// Function to get remaining API requests for the GitHub API
function getGitHubApiLimit() {
  const token = "YOUR_GITHUB_PERSONAL_ACCESS_TOKEN"; // Replace with your GitHub personal access token (optional)
  const apiUrl = "https://api.github.com/rate_limit";
  
  const options = {
    method: "GET",
    headers: {
      Authorization: `token ${token}`, // Authenticated request to get higher rate limits
      Accept: "application/vnd.github.v3+json"
    },
    muteHttpExceptions: true
  };

  try {
    // Fetch rate limit data from GitHub API
    const response = UrlFetchApp.fetch(apiUrl, options);
    
    if (response.getResponseCode() !== 200) {
      return `Error: Unable to fetch rate limit (${response.getResponseCode()})`;
    }
    
    const data = JSON.parse(response.getContentText());
    
    // Extract core API rate limit information
    const core = data.resources.core;
    const remaining = core.remaining;    // How many requests are left
    const resetTime = new Date(core.reset * 1000);  // Convert Unix timestamp to JavaScript Date object
    
    // Calculate time remaining before reset
    const now = new Date();
    const minutesLeft = Math.floor((resetTime - now) / 60000);  // Convert milliseconds to minutes
    
    // Return the number of remaining requests and time until reset
    return `Requests remaining: ${remaining}, Reset in: ${minutesLeft} minutes`;
    
  } catch (error) {
    return `Error: ${error.message}`;
  }
}

